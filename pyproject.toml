[tool.poetry]
name = "qiskit-rigetti"
version = "0.4.5"
description = "Provider for running Qiskit circuits on Rigetti QPUs and simulators."
authors = ["Rigetti Computing"]
license = "Apache-2.0"
readme = "README.md"
repository = "https://github.com/rigetti/qiskit-rigetti"
documentation = "https://qiskit-rigetti.readthedocs.io"
keywords = ["Qiskit", "Quil", "Rigetti", "pyQuil", "Quantum"]
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Science/Research",
    "Intended Audience :: Developers",
    "Programming Language :: Other",
    "Topic :: Scientific/Engineering :: Physics",
    "Typing :: Typed"
]

[tool.poetry.dependencies]
python = "^3.7"
qiskit = "^0.27.0"
pyquil = "^3.0.0"
numpy = "^1.20.1"
importlib_metadata = {version = "*", python = "<3.8"}
sphinx = { version = "^4.1.1", optional = true }
sphinx-autoapi = { version = "^1.8.1", optional = true }
furo = { version = "^2021.7.5-beta.38", optional = true }
myst-parser = { version = "^0.15.1", optional = true }
sphinx-autobuild = { version = "^2021.3.14", optional = true }
nbsphinx = { version = "^0.8.6", optional = true }
ipython = {version = "^7.25.0", optional = true}
black = { version = "^20.8b1", optional = true }
flake8 = { version = "^3.8.1", optional = true }
pytest = { version = "^6.2.2", optional = true }
pytest-cov = { version = "^2.11.1", optional = true }
pytest-httpx = { version = "^0.9", optional = true }
mypy = { version = "^0.800", optional = true }
pytest-mock = { version = "^3.6.1", optional = true }
pip-licenses = { version = "^3.5.1", optional = true }

[tool.poetry.extras]
test = ["pytest", "pytest-cov", "pytest-httpx", "pytest-mock", "black", "flake8", "mypy"]
docs = ["sphinx", "sphinx-autoapi", "furo", "myst-parser", "sphinx-autobuild", "nbsphinx", "ipython"]
licenses = ["pip-licenses"]

[tool.black]
line-length = 120
target-version = ['py37']
include = '\.pyi?$'
exclude = '''

(
  /(
      \.eggs         # black-default
    | \.git
    | \.hg
    | \.mypy_cache
    | \.tox
    | \.venv
    | _build
    | buck-out
    | build
    | dist
  )/
)
'''

[tool.dephell.main]
from = {format = "poetry", path = "pyproject.toml"}
to = {format = "setuppy", path = "setup.py"}

[tool.mypy]
ignore_missing_imports = true

# Enable options equivalent to the --strict command line arg
warn_unused_configs = true
disallow_any_generics = true
disallow_untyped_calls = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_return_any = true
allow_redefinition = true

no_implicit_reexport = false
disallow_subclassing_any = false

[build-system]
requires = ["poetry_core>=1.0.0"]
build-backend = "poetry.core.masonry.api"
